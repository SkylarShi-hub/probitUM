LRT_Events <- 1 - pchisq(M0$deviance - Ms$deviance, length(coef(Ms)) - length(coef(M0)))
View(data)
# Perform likelihood ratio tests against the null model (M0)
LRT_Events <- 1 - pchisq(Ms$deviance - M$deviance, length(coef(M)) - length(coef(Ms)))
# Perform likelihood ratio tests against the null model (M0)
LRT_Events <- 1 - pchisq(Ms$deviance - M$deviance, length(coef(M)) - length(coef(Ms)))
LRT_SES <- 1 - pchisq(Me$deviance - M$deviance, length(coef(M)) - length(coef(Me)))
# Determine which variables to include based on the likelihood ratio tests
# If p-value < 0.05, the variable is significant and should be included in the model
if (LRT_Events < 0.05 & LRT_SES < 0.05) {
chosen_model <- M # Full model with SES and Events
} else if (LRT_Events >= 0.05 & LRT_SES < 0.05) {
chosen_model <- Ms # Model with SES only
} else if (LRT_Events < 0.05 & LRT_SES >= 0.05) {
chosen_model <- Me # Model with Events only
} else {
chosen_model <- M0 # Null model (no predictors)
}
# Predict probabilities for John (low economic status and 7 important life events)
john_data <- data.frame(SES = 0, Events = 7)
probabilities <- predict(chosen_model, newdata = john_data, type = "probs")
# Print the predicted probabilities
print(probabilities)
# Interpretation
cat("Predicted probabilities for John (low SES and 7 important life events):\n")
cat("Well: ", round(probabilities[1], 3), "\n")
cat(LRT_Events)
# Fit ordered logistic regression models
Impairment <- factor(Impairment, levels = c("Well", "Mild", "Moderate", "Impaired"))
orderM0 <- polr(Impairment ~ 1) # Null model (no predictors)
orderMs <- polr(Impairment ~ SES) # Model with SES as predictor
orderMe <- polr(Impairment ~ Events) # Model with Events as predictor
orderM <- polr(Impairment ~ SES + Events) # Full model with SES and Events
# Perform likelihood ratio tests comparing single-variable models with the full model
LRT_Events_ordered <- 1 - pchisq(orderMs$deviance - orderM$deviance, length(coef(orderM)) - length(coef(orderMs)))
LRT_SES_ordered <- 1 - pchisq(orderMe$deviance - orderM$deviance, length(coef(orderM)) - length(coef(orderMe)))
# Load alligator food choice data
data <- read.table("alligatorfood-data.txt", header = TRUE)
View(data)
# Load alligator food choice data
data <- read.table("alligatorfood-data.txt", header = TRUE)
attach(data)
# Load necessary library for multinomial models
library(nnet)
# Define response and predictor variables
y <- cbind(Fish, Invertebrate, Reptile, Bird, Other)
# Fit multinomial models
M1 <- multinom(y ~ 1)
M2 <- multinom(y ~ Lake)
M3 <- multinom(y ~ Gender)
M4 <- multinom(y ~ Size)
M5 <- multinom(y ~ Lake + Gender)
M6 <- multinom(y ~ Lake + Size)
M7 <- multinom(y ~ Gender + Size)
M8 <- multinom(y ~ Lake + Gender + Size)
# Calculate AIC values for each model
aic_values_alligator <- c(
AIC(M1), AIC(M2), AIC(M3), AIC(M4), AIC(M5), AIC(M6), AIC(M7), AIC(M8)
)
# Assign model names for easy reference
model_names_alligator <- c("M1 (Null Model)", "M2 (Lake Only)", "M3 (Gender Only)", "M4 (Size Only)", "M5 (Lake + Gender)", "M6 (Lake + Size)", "M7 (Gender + Size)", "M8 (Lake + Gender + Size)")
# Combine model names and AIC values and sort them
aic_results_alligator <- data.frame(Model = model_names_alligator, AIC = aic_values_alligator)
View(aic_results_alligator)
# Combine model names and AIC values and sort them
aic_results_alligator <- data.frame(Model = model_names_alligator, AIC = aic_values_alligator)
aic_results_alligator <- aic_results_alligator[order(aic_results_alligator$AIC), ]
View(aic_results_alligator)
# Print sorted AIC results
print(aic_results_alligator)
# Choose the model with the lowest AIC value
chosen_alligator_model <- switch(which.min(aic_values_alligator), M1, M2, M3, M4, M5, M6, M7, M8)
# Predict probabilities for a male alligator from Lake Trafford that is 3 meters long preferring reptiles
alligator_data <- data.frame(Lake = "Trafford", Gender = "Male", Size = 1)
predicted_probabilities <- predict(M8, newdata = alligator_data, type = "probs")
# Print predicted probabilities for reptile preference
cat("The predicted probability that a male alligator from Lake Trafford (3 meters long) prefers reptiles is:", round(predicted_probabilities[3], 3), "\n")
??is
is(data,"rollcall")
detach("package:pscl", unload = TRUE)
is(data,"rollcall")
sample_three_utility_probit_gp <- function(
vote_m, years_v, leg_mean, leg_s, alpha_mean, alpha_cov_s,
delta_mean, delta_cov_s, rho_mean, rho_sigma, rho_sd = 0.1, nu = 1,
num_iter = 2000, start_iter = 0, keep_iter = 1, flip_rate = 0.1,
leg_pos_init = NULL, alpha_pos_init = NULL, delta_pos_init = NULL,
rho_init = NULL, y_star_m_1_init = NULL, y_star_m_2_init = NULL, y_star_m_3_init = NULL,
pos_ind = 0, neg_ind = 0,  pos_ind_list = NULL, neg_ind_list  = NULL,
pos_ind_years_list = NULL, neg_ind_years_list = NULL,
start_val = NULL) {
total_iter = (num_iter - start_iter) %/% keep_iter
init_info <- init_data_gp_rcpp(
vote_m, years_v, leg_pos_init, alpha_pos_init, delta_pos_init, rho_init,
y_star_m_1_init, y_star_m_2_init, y_star_m_3_init, total_iter,
pos_ind_list, neg_ind_list, pos_ind_years_list, neg_ind_years_list)
if (!is.null(start_val)) {
init_info[[1]][1,] <- start_val
}
#Init info
draw_info <- sample_three_utility_probit_gp_rcpp(
vote_m, init_info[[1]], init_info[[2]], init_info[[3]], init_info[[4]],
init_info[[11]], init_info[[12]], years_v,
init_info[[13]], unlist(init_info[[14]]), init_info[[6]], init_info[[7]],
init_info[[8]], init_info[[9]], init_info[[10]],
alpha_mean, alpha_cov_s, delta_mean, delta_cov_s,
rho_mean, rho_sigma, rho_sd, nu,
num_iter, start_iter, keep_iter, flip_rate, init_info[[15]], init_info[[16]],
init_info[[17]], init_info[[18]])
all_param_draw = draw_info[[1]]
leg_names <- unlist(sapply(1:nrow(vote_m), function(i) {
sapply(init_info[[14]][[i]], function(year) {
paste(rownames(vote_m)[i], "beta", year, sep = "_")
})
}))
if (is.null(colnames(vote_m))) {
colnames(vote_m) <- sapply(1:ncol(vote_m), function(i) {
paste("vote", i, sep = "_")
})
}
alpha_vote_names_1 <- sapply(colnames(vote_m), function(name) {
paste(name, "alpha", "1", sep = "_")
})
alpha_vote_names_2 <- sapply(colnames(vote_m), function(name) {
paste(name, "alpha", "2", sep = "_")
})
delta_vote_names_1 <- sapply(colnames(vote_m), function(name) {
paste(name, "delta", "1", sep = "_")
})
delta_vote_names_2 <- sapply(colnames(vote_m), function(name) {
paste(name, "delta", "2", sep = "_")
})
colnames(all_param_draw) <-
c(leg_names, alpha_vote_names_1, alpha_vote_names_2,
delta_vote_names_1, delta_vote_names_2, "rho")
beta_list <- as.data.frame(all_param_draw[, leg_names])
alpha1_list <- as.data.frame(all_param_draw[, alpha_vote_names_1])
alpha2_list <- as.data.frame(all_param_draw[, alpha_vote_names_2])
delta1_list <- as.data.frame(all_param_draw[, delta_vote_names_1])
delta2_list <- as.data.frame(all_param_draw[, delta_vote_names_2])
rho_list <- as.data.frame(all_param_draw[, "rho"])
colnames(rho_list) <- "rho"
return(c(list(
beta = beta_list,
alpha1 = alpha1_list,
alpha2 = alpha2_list,
delta1 = delta1_list,
delta2 = delta2_list,
rho = rho_list),
other_info = draw_info[-1]
))
}
init_y_star_m <- function(vote_m) {
y_star_m_1 <- vote_m
y_star_m_2 <- vote_m
y_star_m_3 <- vote_m
y_star_m_1[which(vote_m == 1)] = 0
y_star_m_2[which(vote_m == 1)] = 1
y_star_m_3[which(vote_m == 1)] = 0
no_votes <- which(vote_m == 0)
sample_upper <- rbernoulli(length(no_votes))
y_star_m_1[no_votes[which(sample_upper == 1)]] = 0
y_star_m_2[no_votes[which(sample_upper == 1)]] = 0
y_star_m_3[no_votes[which(sample_upper == 1)]] = 1
y_star_m_1[no_votes[which(sample_upper == 0)]] = 1
y_star_m_2[no_votes[which(sample_upper == 0)]] = 0
y_star_m_3[no_votes[which(sample_upper == 0)]] = 0
return(list(y_star_m_1, y_star_m_2, y_star_m_3))
}
init_data_gp_rcpp <- function(
vote_m, years_v, leg_pos_init, alpha_pos_init, delta_pos_init, rho_init,
y_star_m_1_init, y_star_m_2_init, y_star_m_3_init, total_iter,
pos_ind_list, neg_ind_list, pos_ind_years_list, neg_ind_years_list) {
judge_start_inds <- rep(0, nrow(vote_m))
judge_end_inds <- rep(0, nrow(vote_m))
case_judge_years_ind_m <- vote_m
years_served <- rep(0, nrow(vote_m))
judge_year_v <- c()
judge_start_inds <- c()
judge_end_inds <- c()
start_ind = 0
end_ind = 0
for (i in 1:nrow(vote_m)) {
interested_inds <- which(!is.na(vote_m[i,]))
case_judge_years_ind_m[i,interested_inds] <-
years_v[interested_inds] - min(years_v[interested_inds])
judge_year_v <-
c(judge_year_v, list(min(years_v[interested_inds]):max(years_v[interested_inds])))
end_ind = start_ind +
max(years_v[interested_inds]) - min(years_v[interested_inds])
judge_start_inds <- c(judge_start_inds, start_ind)
judge_end_inds <- c(judge_end_inds, end_ind)
start_ind = end_ind + 1
}
if (!is.null(leg_pos_init)) {
leg_pos_m <-
matrix(leg_pos_init, nrow = total_iter, ncol = length(leg_pos_init), byrow = T)
} else {
leg_pos_m <- matrix(0, nrow = total_iter, ncol = max(judge_end_inds) + 1)
}
if (!is.null(alpha_pos_init)) {
alpha_pos_m <-
matrix(t(alpha_pos_init), nrow = total_iter, ncol = 2 * ncol(vote_m), byrow = T)
} else {
alpha_pos_m <-
matrix(rep(c(-1, 1), ncol(vote_m)),
nrow = total_iter, ncol = 2 * ncol(vote_m), byrow = T)
}
if (!is.null(delta_pos_init)) {
delta_pos_m <-
matrix(t(delta_pos_init), nrow = total_iter, ncol = 2 * ncol(vote_m), byrow = T)
} else {
delta_pos_m <-
matrix(0, nrow = total_iter, ncol = 2 * ncol(vote_m), byrow = T)
}
if (!is.null(rho_init)) {
rho_v <- rep(rho_init, nrow = total_iter)
} else {
rho_v <- rep(0.9, nrow = total_iter)
}
if (!is.null(y_star_m_1_init)) {
y_star_m_1 <- y_star_m_1_init
y_star_m_2 <- y_star_m_2_init
y_star_m_3 <- y_star_m_3_init
} else {
y_star_info <- init_y_star_m(vote_m)
y_star_m_1 <- y_star_info[[1]]
y_star_m_2 <- y_star_info[[2]]
y_star_m_3 <- y_star_info[[3]]
}
all_params_draw <- cbind(leg_pos_m, alpha_pos_m, delta_pos_m, rho_v)
beta_start_ind = 0;
alpha_start_ind = max(judge_end_inds) + 1;
alpha_2_start_ind = alpha_start_ind + ncol(vote_m);
delta_start_ind = alpha_2_start_ind + ncol(vote_m);
delta_2_start_ind = delta_start_ind + ncol(vote_m);
rho_start_ind = delta_2_start_ind + ncol(vote_m);
pos_ind_judge_list <- vector(mode = "integer")
pos_ind_judge_year_list <- vector(mode = "integer")
if (length(pos_ind_list) > 0) {
for (i in 1:length(pos_ind_list)) {
tmp_judge_list <-
judge_start_inds[pos_ind_list[i]]:
judge_end_inds[pos_ind_list[i]]
tmp_judge_year_list <- judge_year_v[[pos_ind_list[i]]]
if (length(pos_ind_years_list) > 0) {
tmp_judge_list <- tmp_judge_list[pos_ind_years_list[[i]]]
tmp_judge_year_list <-
tmp_judge_year_list[pos_ind_years_list[[i]]]
}
pos_ind_judge_list <- c(pos_ind_judge_list, tmp_judge_list)
pos_ind_judge_year_list <-
c(pos_ind_judge_year_list, tmp_judge_year_list)
}
}
neg_ind_judge_list <- vector(mode = "integer")
neg_ind_judge_year_list <- vector(mode = "integer")
if (length(neg_ind_list) > 0) {
for (i in 1:length(neg_ind_list)) {
tmp_judge_list <-
judge_start_inds[neg_ind_list[i]]:
judge_end_inds[neg_ind_list[i]]
tmp_judge_year_list <- judge_year_v[[neg_ind_list[i]]]
if (length(neg_ind_years_list) > 0) {
tmp_judge_list <- tmp_judge_list[neg_ind_years_list[[i]]]
tmp_judge_year_list <-
tmp_judge_year_list[neg_ind_years_list[[i]]]
}
neg_ind_judge_list <- c(neg_ind_judge_list, tmp_judge_list)
neg_ind_judge_year_list <-
c(neg_ind_judge_year_list, tmp_judge_year_list)
}
}
return(list(all_params_draw, y_star_m_1, y_star_m_2,
y_star_m_3, beta_start_ind,
alpha_start_ind, alpha_2_start_ind,
delta_start_ind, delta_2_start_ind, rho_start_ind,
judge_start_inds, judge_end_inds,
case_judge_years_ind_m, judge_year_v,
pos_ind_judge_list, neg_ind_judge_list,
pos_ind_judge_year_list, neg_ind_judge_year_list))
}
library(Rcpp)
library(purrr)
setwd("E:/OneDrive/UW_Seattle/paper/Abel/code/dynamic_model")
sourceCpp("helper_functions_dynamic.cpp")
load("E:/OneDrive/UW_Seattle/paper/Abel/code/dynamic_model/mq_supreme_court_vote_info_2021_2.Rdata")
post_sample_dynamic_normal <- sample_three_utility_probit_gp(
mqVotes, mqTime, 0, 1, c(0, 0), 25 * diag(2),
c(-2, 10), 10 * diag(2), 0.9, 0.04, 0.1, 1,
num_iter = 600000, start_iter = 400000, keep_iter = 20,
pos_ind_list = pos_inds, pos_ind_years_list = pos_year_inds,
neg_ind_list = neg_inds, neg_ind_years_list = neg_year_inds)
sourceCpp("helper_functions_dynamic.cpp")
post_sample_dynamic_normal <- sample_three_utility_probit_gp(
mqVotes, mqTime, 0, 1, c(0, 0), 25 * diag(2),
c(-2, 10), 10 * diag(2), 0.9, 0.04, 0.1,
num_iter = 600000, start_iter = 400000, keep_iter = 20,
pos_ind_list = pos_inds, pos_ind_years_list = pos_year_inds,
neg_ind_list = neg_inds, neg_ind_years_list = neg_year_inds)
sourceCpp("helper_functions_dynamic.cpp")
post_sample_dynamic_normal <- sample_three_utility_probit_gp(
mqVotes, mqTime, 0, 1, c(0, 0), 25 * diag(2),
c(-2, 10), 10 * diag(2), 0.9, 0.04, 0.1,
num_iter = 600000, start_iter = 400000, keep_iter = 20,
pos_ind_list = pos_inds, pos_ind_years_list = pos_year_inds,
neg_ind_list = neg_inds, neg_ind_years_list = neg_year_inds)
sourceCpp("helper_functions_dynamic.cpp")
sample_three_utility_probit_gp <- function(
vote_m, years_v, leg_mean, leg_s, alpha_mean, alpha_cov_s,
delta_mean, delta_cov_s, rho_mean, rho_sigma, rho_sd = 0.1,
num_iter = 2000, start_iter = 0, keep_iter = 1, flip_rate = 0.1,
leg_pos_init = NULL, alpha_pos_init = NULL, delta_pos_init = NULL,
rho_init = NULL, y_star_m_1_init = NULL, y_star_m_2_init = NULL, y_star_m_3_init = NULL,
pos_ind = 0, neg_ind = 0,  pos_ind_list = NULL, neg_ind_list  = NULL,
pos_ind_years_list = NULL, neg_ind_years_list = NULL,
start_val = NULL) {
total_iter = (num_iter - start_iter) %/% keep_iter
init_info <- init_data_gp_rcpp(
vote_m, years_v, leg_pos_init, alpha_pos_init, delta_pos_init, rho_init,
y_star_m_1_init, y_star_m_2_init, y_star_m_3_init, total_iter,
pos_ind_list, neg_ind_list, pos_ind_years_list, neg_ind_years_list)
if (!is.null(start_val)) {
init_info[[1]][1,] <- start_val
}
#Init info
draw_info <- sample_three_utility_probit_gp_rcpp(
vote_m, init_info[[1]], init_info[[2]], init_info[[3]], init_info[[4]],
init_info[[11]], init_info[[12]], years_v,
init_info[[13]], unlist(init_info[[14]]), init_info[[6]], init_info[[7]],
init_info[[8]], init_info[[9]], init_info[[10]],
alpha_mean, alpha_cov_s, delta_mean, delta_cov_s,
rho_mean, rho_sigma, rho_sd,
num_iter, start_iter, keep_iter, init_info[[15]], init_info[[16]],
init_info[[17]], init_info[[18]])
all_param_draw = draw_info[[1]]
leg_names <- unlist(sapply(1:nrow(vote_m), function(i) {
sapply(init_info[[14]][[i]], function(year) {
paste(rownames(vote_m)[i], "beta", year, sep = "_")
})
}))
if (is.null(colnames(vote_m))) {
colnames(vote_m) <- sapply(1:ncol(vote_m), function(i) {
paste("vote", i, sep = "_")
})
}
alpha_vote_names_1 <- sapply(colnames(vote_m), function(name) {
paste(name, "alpha", "1", sep = "_")
})
alpha_vote_names_2 <- sapply(colnames(vote_m), function(name) {
paste(name, "alpha", "2", sep = "_")
})
delta_vote_names_1 <- sapply(colnames(vote_m), function(name) {
paste(name, "delta", "1", sep = "_")
})
delta_vote_names_2 <- sapply(colnames(vote_m), function(name) {
paste(name, "delta", "2", sep = "_")
})
colnames(all_param_draw) <-
c(leg_names, alpha_vote_names_1, alpha_vote_names_2,
delta_vote_names_1, delta_vote_names_2, "rho")
beta_list <- as.data.frame(all_param_draw[, leg_names])
alpha1_list <- as.data.frame(all_param_draw[, alpha_vote_names_1])
alpha2_list <- as.data.frame(all_param_draw[, alpha_vote_names_2])
delta1_list <- as.data.frame(all_param_draw[, delta_vote_names_1])
delta2_list <- as.data.frame(all_param_draw[, delta_vote_names_2])
rho_list <- as.data.frame(all_param_draw[, "rho"])
colnames(rho_list) <- "rho"
return(c(list(
beta = beta_list,
alpha1 = alpha1_list,
alpha2 = alpha2_list,
delta1 = delta1_list,
delta2 = delta2_list,
rho = rho_list),
other_info = draw_info[-1]
))
}
post_sample_dynamic_normal <- sample_three_utility_probit_gp(
mqVotes, mqTime, 0, 1, c(0, 0), 25 * diag(2),
c(-2, 10), 10 * diag(2), 0.9, 0.04, 0.1,
num_iter = 600000, start_iter = 400000, keep_iter = 20,
pos_ind_list = pos_inds, pos_ind_years_list = pos_year_inds,
neg_ind_list = neg_inds, neg_ind_years_list = neg_year_inds)
library(dplyr)
beta_mat_new <- post_samples_dynamic_normal$beta[, grepl("HLBlack", colnames(post_samples_dynamic_normal$beta))]
beta_mat_new <- post_sample_dynamic_normal$beta[, grepl("HLBlack", colnames(post_sample_dynamic_normal$beta))]
par(mfrow=c(3,3))
years <- seq(1937, 1970)
for (i in 1:ncol(beta_mat_new)){
hist(beta_mat_new[,i],
breaks = 50,              # 设置分组数
probability = TRUE,       # 显示概率密度而不是频率
main = paste0("Beta of HLBlack in ",years[i]),  # 设置图的标题
xlab = "Sample Values",          # x轴标签
col = "lightblue",         # 直方图的颜色
border = "white")          # 直方图边框颜色
# 添加密度平滑曲线
lines(density(beta_mat_new[,i]),
col = "red",              # 曲线颜色
lwd = 2)
}
set.seed(1357)
post_sample_dynamic_normal2 <- sample_three_utility_probit_gp(
mqVotes, mqTime, 0, 1, c(0, 0), 25 * diag(2),
c(-2, 10), 10 * diag(2), 0.9, 0.04, 0.1,
num_iter = 600000, start_iter = 400000, keep_iter = 20,
pos_ind_list = pos_inds, pos_ind_years_list = pos_year_inds,
neg_ind_list = neg_inds, neg_ind_years_list = neg_year_inds)
View(orderMs)
beta_mat_new <- post_sample_dynamic_normal2$beta[, grepl("HLBlack", colnames(post_sample_dynamic_normal2$beta))]
par(mfrow=c(3,3))
years <- seq(1937, 1970)
for (i in 1:ncol(beta_mat_new)){
hist(beta_mat_new[,i],
breaks = 50,              # 设置分组数
probability = TRUE,       # 显示概率密度而不是频率
main = paste0("Beta of HLBlack in ",years[i]),  # 设置图的标题
xlab = "Sample Values",          # x轴标签
col = "lightblue",         # 直方图的颜色
border = "white")          # 直方图边框颜色
# 添加密度平滑曲线
lines(density(beta_mat_new[,i]),
col = "red",              # 曲线颜色
lwd = 2)
}
save(post_sample_dynamic_normal, file = "E:/OneDrive/UW_Seattle/paper/Abel/code/post_sample_dynamic_normal.rda")
save(post_sample_dynamic_normal, file = "D:/project2024/post_sample_dynamic_normal.rda")
save(post_sample_dynamic_normal2, file = "D:/project2024/post_sample_dynamic_normal2.rda")
data<-read.table("policestops.txt",header=TRUE)
setwd("E:/OneDrive/UW_Seattle/paper/Abel/pumBayes")
setwd("E:/OneDrive/UW_Seattle/paper/Abel/pumBayes")
setwd("E:/OneDrive/UW_Seattle/24Autumn/536/hwk3")
data<-read.table("policestops.txt",header=TRUE)
attach(data)
View(data)
data<-read.table("policestops.txt",header=TRUE)
colnames(data) <- c("stops", "arrests", "precinct", "ethnicity")
attach(data)
# 1. stops ~ precinct + ethnicity
model_1 <- glm(stops ~ factor(ethnicity) + factor(precinct),
family = poisson(link = "log"), data = data)
# 2. stops ~ precinct
model_2 <- glm(stops ~ factor(precinct),
family = poisson(link = "log"), data = data)
# 3. stops ~ ethnicity
model_3 <- glm(stops ~ factor(ethnicity),
family = poisson(link = "log"), data = data)
# 4. stops ~ 1
model_4 <- glm(stops ~ 1,
family = poisson(link = "log"), data = data)
# Compare AIC and BIC
AIC(model_1, model_2, model_3, model_4)
BIC(model_1, model_2, model_3, model_4)
best_AIC_model <- which.min(c(AIC(model_1), AIC(model_2), AIC(model_3), AIC(model_4)))
best_BIC_model <- which.min(c(BIC(model_1), BIC(model_2), BIC(model_3), BIC(model_4)))
cat("The best model based on AIC is ", best_AIC_model)
cat("The best model based on BIC is ", best_BIC_model)
# Precinct 3, Ethnicity 1 (Black), with arrests as baseline
predict(model_5, newdata = data.frame(precinct = 3, ethnicity = 1, arrests = 500), type = "response")
# Precinct 3, Ethnicity 1 (Black)
predict(model_1, newdata = data.frame(precinct = 3, ethnicity = 1), type = "response")
# Precinct 3, Ethnicity 3 (White)
predict(model_1, newdata = data.frame(precinct = 3, ethnicity = 3), type = "response")
# Precinct 3, Ethnicity 1 (Black)
p1 = predict(model_1, newdata = data.frame(precinct = 3, ethnicity = 1), type = "response")
cat("The expected number of stops in precinct 3 for blacks is ", p1)
# Precinct 3, Ethnicity 3 (White)
p2 = predict(model_1, newdata = data.frame(precinct = 3, ethnicity = 3), type = "response")
# Precinct 3, Ethnicity 3 (White)
p2 = predict(model_1, newdata = data.frame(precinct = 3, ethnicity = 3), type = "response")
cat("The expected number of stops in precinct 3 for whites is ", p2)
# Precinct 1, Ethnicity 1 (Black)
p3 = predict(model_1, newdata = data.frame(precinct = 1, ethnicity = 1), type = "response")
cat("The expected number of stops in precinct 1 for blacks is ", p3)
# Precinct 1, Ethnicity 3 (White)
p4 = predict(model_1, newdata = data.frame(precinct = 1, ethnicity = 3), type = "response")
cat("The expected number of stops in precinct 1 for whites is ", p4)
# 1. stops ~ precinct + ethnicity + offset(log(arrests))
model_5 <- glm(stops ~ factor(ethnicity) + factor(precinct),
family = poisson(link = "log"), offset = log(arrests), data = data)
# 2. stops ~ precinct + offset(log(arrests))
model_6 <- glm(stops ~ factor(precinct),
family = poisson(link = "log"), offset = log(arrests), data = data)
# 3. stops ~ ethnicity + offset(log(arrests))
model_7 <- glm(stops ~ factor(ethnicity),
family = poisson(link = "log"), offset = log(arrests), data = data)
# 4. stops ~ 1 + offset(log(arrests)) (仅包含截距项)
model_8 <- glm(stops ~ 1,
family = poisson(link = "log"), offset = log(arrests), data = data)
# Compare AIC and BIC
AIC_values <- AIC(model_5, model_6, model_7, model_8)
# Compare AIC and BIC
AIC(model_5, model_6, model_7, model_8)
BIC(model_5, model_6, model_7, model_8)
best_AIC_model_B <- which.min(c(AIC(model_5), AIC(model_6), AIC(model_7), AIC(model_8)))
best_BIC_model_B <- which.min(c(BIC(model_5), BIC(model_6), BIC(model_7), BIC(model_8)))
best_AIC_model_B
# Precinct 3, Ethnicity 1 (Black)
predict_3_black <- predict(model_5, newdata = data.frame(precinct = 3, ethnicity = 1, arrests = 500), type = "response")
cat("The expected number of stops in precinct 3 for blacks is ", predict_3_black)
# Precinct 3, Ethnicity 3 (White)
predict_3_white <- predict(model_5, newdata = data.frame(precinct = 3, ethnicity = 3, arrests = 500), type = "response")
cat("The expected number of stops in precinct 3 for whites is ", predict_3_white)
# Precinct 1, Ethnicity 1 (Black)
predict_1_black <- predict(model_5, newdata = data.frame(precinct = 1, ethnicity = 1, arrests = 300), type = "response")
predict_1_black
cat("The expected number of stops in precinct 1 for blacks is ", predict_1_black)
# Precinct 1, Ethnicity 3 (White)
predict_1_white <- predict(model_5, newdata = data.frame(precinct = 1, ethnicity = 3, arrests = 300), type = "response")
cat("The expected number of stops in precinct 1 for whites is ", predict_1_white)
model_5
model_1

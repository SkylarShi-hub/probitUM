[{"path":"https://skylarshihub.github.io/pumBayes/articles/vignettes.html","id":"the-probit-unfolding-model","dir":"Articles","previous_headings":"","what":"The Probit Unfolding Model","title":"pumBayes`:` Bayesian Estimation of Probit Unfolding Models for Binary Preference Data","text":"probit unfolding model (PUM short, Lei Rodriguez, 2024a) one-dimensional factor analysis model closely related item response models (e.g., see Fox, 2010). PUM can used estimate individual’s preferences binary choice data, one canonical application political science recovery ideological scores voting records. key feature PUM , unlike traditional item response theory models, allows response functions non-monotonic preferences/latent traits. probit unfolding model can motivated use random utility functions. ground presentation model, describe terms usual political science terminology. context, typically \\(\\) legislators/judges vote favor \\(J\\) issues. PUM assumes preferences legislator/judge \\(\\) ,denoted \\(\\beta_i\\), belong one-dimensional Euclidean latent ‘’policy’’ space. common refer \\(\\beta_i\\) ‘’ideal point’’ legislator/judge \\(\\), represents preferred policy. Similarly, issue associated positions policy space, \\(\\psi_{j,1} < \\psi_{j,2} < \\psi_{j,3}\\), \\(\\psi_{j,2}\\) associated affirmative vote, \\(\\psi_{j,1}\\) \\(\\psi_{j,3}\\) associated negative vote issue \\(j\\). Legislators/judges choose among three options basis (random) utility functions form: \\[\\begin{equation}\\label{eq:utilities} \\begin{aligned} U_{N-}(\\beta_i, \\psi_{j,1}) &= -(\\beta_i - \\psi_{j,1})^2 + \\epsilon_{,j,1}, \\\\ U_Y(\\beta_i, \\psi_{j,2}) &= -(\\beta_i - \\psi_{j,2})^2 + \\epsilon_{,j,2}, \\\\ U_{N+}(\\beta_i, \\psi_{j,3}) &= -(\\beta_i - \\psi_{j,3})^2 + \\epsilon_{,j,3}, \\end{aligned} \\end{equation}\\] \\(\\epsilon_{,j,t,1}\\), \\(\\epsilon_{,j,t,2}\\), \\(\\epsilon_{,j,3}\\) independent standard Gaussian shocks. , let \\(y_{,j}\\) represent vote legislator/judge \\(\\) issue \\(j\\), probability affirmative vote given \\[\\begin{align}         P(y_{,j} = 1 \\mid \\beta_i, \\psi_{j,1}, \\psi_{j,2}, \\psi_{j,3}) &= P(\\epsilon_{,j,1} - \\epsilon_{,j,2} < \\alpha_{j,1}(\\beta_i - \\delta_{j,1}), \\epsilon_{,j,3} - \\epsilon_{,j,2} < \\alpha_{j,2}(\\beta_i - \\delta_{j,2})) \\nonumber \\\\         %         & = \\int_{-\\infty}^{\\alpha_{j,1}(\\beta_i-\\delta_{j,1})} \\int_{-\\infty}^{\\alpha_{j,2}(\\beta_i-\\delta_{j,2})} \\frac{1}{2\\sqrt{3\\pi}} \\exp\\left\\{-\\frac{1}{3} \\left( z_1^2 - z_1 z_2 + z_2^2 \\right) \\right\\} dz_1 dz_2 \\label{eq:theta_ij_def}, \\end{align}\\] \\(\\alpha_{j,1} = 2(\\psi_{j,2} - \\psi_{j,1}), \\alpha_{j,2} = 2(\\psi_{j,2} - \\psi_{j,3}), \\delta_{j,1} = (\\psi_{j,1} + \\psi_{j,2})/2\\) \\(\\delta_{j,2} = (\\psi_{j,3} + \\psi_{j,2})/2\\). pumBayes enables Bayesian estimation probit unfolding models. can manage versions model ideal point \\(\\beta_i\\) votes taken legislator/judge \\(\\), ones ideal points allowed evolve slowly time.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/articles/vignettes.html","id":"prior-distributions","dir":"Articles","previous_headings":"","what":"Prior distributions","title":"pumBayes`:` Bayesian Estimation of Probit Unfolding Models for Binary Preference Data","text":"pumBayes uses prior distributions issue-specific parameters \\((\\boldsymbol{\\alpha}_j,\\boldsymbol{\\delta}_j)\\) independent across \\(j=1, \\ldots, J\\) take form \\[\\begin{multline*} p(\\boldsymbol{\\alpha}_j,\\boldsymbol{\\delta}_j) = \\frac{1}{2}\\text{TN}_2(\\boldsymbol{\\alpha}_j\\mid \\mathbf{0}, \\omega \\mathbb{}_{2\\times 2})\\mathbf{1}(\\alpha_{j,1}>0,\\alpha_{j,2}<0)\\text{N}_2(\\boldsymbol{\\delta}_j\\mid \\boldsymbol{\\mu},\\kappa\\mathbb{}_{2\\times 2})\\\\ % + \\frac{1}{2}\\text{TN}_2(\\boldsymbol{\\alpha}_j\\mid \\mathbf{0}, \\omega \\mathbb{}_{2\\times 2})\\mathbf{1}(\\alpha_{j,1}<0,\\alpha_{j,2}>0)\\text{N}_2(\\boldsymbol{\\delta}_j\\mid -\\boldsymbol{\\mu},\\kappa\\mathbb{}_{2\\times 2}) , \\end{multline*}\\] \\(\\boldsymbol{\\alpha}_j = (\\alpha_{j,1}, \\alpha_{j,2})\\), \\(\\boldsymbol{\\delta}_j = (\\delta_{j,1}, \\delta_{j,2})\\), \\(\\text{N}_q( \\cdot \\mid \\mathbf{}, \\mathbf{})\\) denotes \\(q\\)-variate normal distribution mean vector \\(\\mathbf{}\\) variance matrix \\(\\mathbf{}\\) , similarly, \\(\\text{TN}_q( \\cdot \\mid \\mathbf{}, \\mathbf{})\\mathbf{1}(\\Omega)\\) denotes \\(q\\)-variate normal distribution mean vector \\(\\mathbf{}\\) variance matrix \\(\\mathbf{}\\) truncated set \\(\\Omega\\). static version model, pumBayes uses standard normal distribution prior ideal point, .e., \\(\\beta_i \\sim N(0,1)\\) independetly \\(=1, \\ldots, \\). dynamic version model, ideal points still assumed independent across individuals, linked across time given individual using first-order autoregressive process whose stationary distribution standard normal distribution. parameters latent autoregressive process given hyperpriors learned data. choice prior distributions ensure parameters identifiable shifts scalings latent policy space. order ensure identifiability reflections policy space, users must identify individual(s) data sign ideal point fixed positive.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/articles/vignettes.html","id":"posterior-computation","dir":"Articles","previous_headings":"","what":"Posterior computation","title":"pumBayes`:` Bayesian Estimation of Probit Unfolding Models for Binary Preference Data","text":"pumBayes relies Markov chain Monte Carlo algorithm generate samples posterior distribution model. construction sampler involves two data augmentation tricks. first augmentation trick reminiscent described Albert Chib (1993) involves introduction vectors latent variables, \\(\\boldsymbol{y}_{,j}^{*} = (y^{*}_{, j, 1}, y^{*}_{, j, 2}, y^{*}_{, j, 3})\\) every \\(=1\\ldots,\\) \\(j=1,\\ldots,J\\). definition latent variables tightly linked form utility functions \\(\\ref{eq:utilities}\\): \\[\\begin{align*}     y^{*}_{, j, 1} & = - \\alpha_{j,1}(\\beta_{} - \\delta_{j,1}) + e_{, j, 1}, \\\\     y^{*}_{, j, 2} & =  e_{, j, 2}, \\\\     y^{*}_{, j, 3} & = - \\alpha_{j,2}(\\beta_{} - \\delta_{j,2}) + e_{, j, 3}, \\end{align*}\\] \\(e_{, j, 1}\\), \\(e_{, j, 2}\\) \\(e_{, j, 3}\\) standard normal distributions. augmentations ensures full conditional distributions belong standard families direct sampling possible. second augmentation trick breaks mixture prior \\(\\boldsymbol{\\alpha}_j\\) \\(\\boldsymbol{\\delta}_j\\) two fully connected regions associated support. particular, \\(j=1,\\ldots,J\\), let \\(z_{j} = 1\\) \\(\\alpha_{j,1} > 0\\) \\(\\alpha_{j,2} < 0\\), \\(z_{j} = -1\\) otherwise. , \\(\\Pr(z_{,j} = 1) = \\Pr(z_{,j} = -1) = 1/2\\), \\[\\begin{align*}     p(& \\boldsymbol{\\alpha}_j, \\boldsymbol{\\delta}_j \\mid z_j) = \\begin{cases}     \\frac{1}{16 \\pi^2 \\omega^2 \\kappa^2} \\exp\\left\\{ -\\frac{1}{2} \\left(\\frac{1}{\\omega^2 }\\boldsymbol{\\alpha}_j'\\boldsymbol{\\alpha}_j +     \\frac{1}{\\kappa^2}(\\boldsymbol{\\delta}_j - \\boldsymbol{\\vartheta})'(\\boldsymbol{\\delta}_j - \\boldsymbol{\\vartheta}) \\right)\\right\\} \\mathbb{1}(\\alpha_{j,1}>0, \\alpha_{j,2}<0) & z_j = 1 , \\\\     \\frac{1}{16 \\pi^2 \\omega^2 \\kappa^2} \\exp\\left\\{ -\\frac{1}{2} \\left(\\frac{1}{\\omega^2 }\\boldsymbol{\\alpha}_j'\\boldsymbol{\\alpha}_j +     \\frac{1}{\\kappa^2}(\\boldsymbol{\\delta}_j + \\boldsymbol{\\vartheta})'(\\boldsymbol{\\delta}_j + \\boldsymbol{\\vartheta}) \\right)\\right\\} \\mathbb{1}(\\alpha_{j,1}<0, \\alpha_{j,2}>0) & z_j = -1. \\\\     \\end{cases} \\end{align*}\\] second augmentation important ensure algorithm can fully explore posterior distribution \\(\\boldsymbol{\\alpha}_j\\) , particular, can move quadrant \\(\\alpha_{j,1} >0\\) \\(\\alpha_{j,2}<0\\), \\(\\alpha_{j,1} <0\\) \\(\\alpha_{j,2}>0\\). sample \\(z_j\\), algorithm relies two Metropolis-Hasting steps whose different relative frequencies. Full details algorithm can found Lei Rodriguez (2024a) Lei Rodriguez (2024b).","code":""},{"path":"https://skylarshihub.github.io/pumBayes/articles/vignettes.html","id":"installing-pumbayes","dir":"Articles","previous_headings":"","what":"Installing pumBayes","title":"pumBayes`:` Bayesian Estimation of Probit Unfolding Models for Binary Preference Data","text":"pumBayes available can installed using function package: pumBayes relies external package core functionality. two main functions package (, name suggests, generates posterior samples static version PUM) (generates samples dynamic version). package also includes various support functions can used pre-process data, explore effect hyperparameters, compute metrics model fit.","code":"# Load pumBayes package if (!requireNamespace(\"pumBayes\", quietly = TRUE)) {   devtools::install_github(\"SkylarShiHub/pumBayes\") } library(pumBayes)"},{"path":"https://skylarshihub.github.io/pumBayes/articles/vignettes.html","id":"fitting-static-probit-unfolding-models-using-pumbayes","dir":"Articles","previous_headings":"","what":"Fitting static probit unfolding models using pumBayes","title":"pumBayes`:` Bayesian Estimation of Probit Unfolding Models for Binary Preference Data","text":"start demonstrating use function . can handle data form either object package , form logical matrix values correspond affirmative votes, values correspond negative votes, s correspond type missing data. matrix object used input, names rows assumed correspond legislators names. object used input, votes ‘’Yea’’ encoded 1 ‘’Nay’’ encoded 0. situations encoded ‘’NA’’. demonstration, use pumBayes recover legislators’ preferences roll-call voting data 116 U.S. House Representatives. data can downloaded using pscl package. object class . purposes, key component object , name suggests, contains outcomes votes cast legislator served House period. outcomes typically encoded 1, 2 3 affirmative vote (Yea'', ''Paired Yea'' ''Announced Yea''), 4, 5, 6 negative vote (Announced Nay’‘,’‘Paired Nay’’ ‘’Nay’)‘, 0, 7, 8, 9 different types missing values (``Yet Member’‘,’‘Present’’ ‘’Voting’’). component object typically includes explanation codes. Another useful component object , contains information legislators involved dataset. parameters bound list passed argument function . function returns ‘’clean’’ version original object: final step able fit model select hyperparameters. default values used pumBayes correspond \\(\\boldsymbol{\\mu}= (-2, 10)'\\), \\(\\omega = 5\\) \\(\\kappa = \\sqrt{10}\\). way evaluate suitability default values visualize implied prior probability affirmative outcome obtained Equation \\(\\ref{eq:theta_ij_def}\\). function allows us generate random sample implied distribution, histogram samples provides convenient visualization:  histogram shows, default hyperparameter values imply prior places mass close either 0 1. turn implies assumption , votes, majority legislators quite certain way vote. seems appropriate context application. prior also places slightly mass close 1 close 0. , appropriate, agenda-setting powers majority means motions put vote U.S. House tend pass, therefore receive affirmative negative votes. function can also used explore implications alternative prior specifications. example, prior concentrated around 0.5 can obtained setting \\(\\boldsymbol{\\mu}= (-40, 0)'\\), \\(\\omega = 0.1\\) \\(\\kappa = 5\\).  now ready invoke function sample posterior distribution: Typically, ideal points legislators ideological ranks imply key quantities interest kind analysis. can obtained using function . illustrative compare ideological ranks estimated PUM estimated using traditional approaches IDEAL (Jackman, 2001), implemented package: effective way visualize comparison scatterplot median ranks estimated models.  scatterplot shows, rankings generated PUM can differ significantly generated IDEAL, especially Democratic legislators. top four discrepancies members “Squad”: Representatives Alexandria Ocasio-Cortez (NY), Ilhan Omar (MN), Ayanna Pressley (MA), Rashida Tlaib (MI). IDEAL positions centrists, PUM places among liberal Democratic caucus. Given Squad’s advocacy progressive policies, PUM’s ranking seems accurate. %Differences also notable among several Republican Independent legislators. instance, Justin Amash (MI) Matt Gaetz (FL) rated extremists PUM appear moderate IDEAL. Known aligning extreme Democrats opposing party key issues, pacing Amash Gaetz members Republican Party’s extreme wing seems appropriate. % results look similar instead compare ranks generated using package: % neutral person: “SHERRILL” maybe “JORDAN”, “MCCARTHY” (reverse policy space)  mentioned introduction, differences estimates generated two models due fact PUM allows monotonic non-monotonic response functions. illustrate , can construct estimates response functions associated three separate votes, can constructed using function pumBayes:  figure shows, PUM can capture monotonic non-monotonic response functions depending information contained observed data. Vote 5 (clerk session vote number 6) vote 9 (clerk session vote number 10) examples votes monotonic response functions, vote 6 (clerk session vote number 7) example vote non-monotonic response function. Comparisons PUM Bayesian models can carried using blocked version Watanabe-Akaike Information Criterion (WAIC, (Watanabe Opper, 2010; Watanabe, 2013; Gelman, Hwang Vehtari, 2014)). given House model, WAIC s given \\[\\begin{multline}\\label{eq:lWAIC}     WAIC = -2\\left[\\sum_{=1}^{} \\log\\left( \\textrm{E}_{\\textrm{post}} \\left\\{     \\prod_{j = 1}^J \\theta_{,j}^{y_{,j}} \\left[1 -\\theta_{,j}\\right]^{1 - y_{,j}} \\right\\} \\right) \\right. \\\\     %      \\left. - \\sum_{=1}^{}  \\textrm{var}_{\\textrm{post}}\\left\\{     \\sum_{j = 1}^{J} \\left[ y_{,j} \\log \\theta_{,j} + (1-y_{,j}) \\log(1-\\theta_{,j}) \\right] \\right\\} \\right] , \\end{multline}\\] \\(\\theta_{, j}\\) represents probability legislator \\(\\) votes ‘’Aye’’ issue \\(j\\). Lower values WAIC provide evidence favor particular model. Like Akaike Information Criterion Bayesian Information Criterion, WAIC attempts balance model fit model complexity. However, unlike two criteria, WAIC appropriate hierarchical setting invariant reparametrizations model. calculate WAIC values, first calculate probability array voting ‘’Aye’’ using functions . output array includes three dimensions representing members, issues MCMC iterations. function can used evaluate complexity-adjusted fit PUM IDEAL models using WAIC criteria : results clearly indicate PUM outperforms IDEAL particular dataset, evidenced significantly smaller WAIC value.","code":"# Download voting data for the 116th House from https://voteview.com require(pscl) h116 <- readKH(\"https://voteview.com/static/data/out/votes/H116_votes.ord\",                 desc=\"116th U.S. House of Representatives\") # Sneak peek at the voting data print(h116$votes[1:6,1:8]) ##                   Vote 1 Vote 2 Vote 3 Vote 4 Vote 5 Vote 6 Vote 7 Vote 8 ## TRUMP (R NA)           0      0      0      0      0      0      0      0 ## BYRNE (R AL-1)         6      6      6      1      6      6      1      6 ## ROBY (R AL-2)          6      6      6      1      6      6      1      6 ## ROGERS (R AL-3)        6      6      6      1      6      6      1      6 ## ADERHOLT (R AL-4)      6      6      6      1      6      6      1      6 ## BROOKS (R AL-5)        6      6      6      1      6      6      1      6 # Encoding of vote outcomes in the rollcall object print(h116$codes) ## $yea ## [1] 1 2 3 ##  ## $nay ## [1] 4 5 6 ##  ## $notInLegis ## [1] 0 ##  ## $missing ## [1] 7 8 9 # Sneak peek at the legislator data print(h116$legis.data[1:6,]) ##                   state icpsrState cd icpsrLegis party partyCode ## TRUMP (R NA)       <NA>         99  0      99912     R       200 ## BYRNE (R AL-1)       AL         41  1      21376     R       200 ## ROBY (R AL-2)        AL         41  2      21192     R       200 ## ROGERS (R AL-3)      AL         41  3      20301     R       200 ## ADERHOLT (R AL-4)    AL         41  4      29701     R       200 ## BROOKS (R AL-5)      AL         41  5      21193     R       200 data_preprocess = list(leg_rm = legis.to.remove,                          combine_leg_index = legis.to.combine,                          combine_leg_party = legis.to.combine.party,                          lop_leg = lop.leg, lop_issue = lop.issue) h116.c = preprocess_rollcall(h116, data_preprocess) hyperparams1 = list(beta_mean = 0, beta_var = 1, alpha_mean = c(0, 0),                    alpha_scale = 5, delta_mean = c(-2, 10), delta_scale = sqrt(10)) theta1 = tune_hyper(hyperparams1, n_leg = 1000, n_issue = 1000) hist(theta1, freq = FALSE, xlab=expression(theta[list(i, j)]), main=\"Default prior\",      cex.lab = 1.5, cex.main = 1.8) hyperparams2 = list(beta_mean = 0, beta_var = 1, alpha_mean = c(0, 0),                    alpha_scale = 0.1, delta_mean = c(-40, 0), delta_scale = 5) theta2 = tune_hyper(hyperparams2, n_leg = 1000, n_issue = 1000) hist(theta2, freq = FALSE, xlab=expression(theta[list(i, j)]), main=\"Alternative prior\",      cex.lab = 1.5, cex.main = 1.8) # Configure the MCMC algorithm control = list(num_iter = 40000, start_iter = 30000, keep_iter = 20, flip_rate = 0.1) # Run MCMC algorithm to get posterior samples post_samples_pum = sample_pum_static(h116.c, hyperparams1, control,                                      pos_leg = grep(\"SCALISE\", rownames(h116.c$votes)),                                      verbose = TRUE) rank_pum = post_rank(h116.c, post_samples_pum$beta, c(0.05, 0.5, 0.95)) head(rank_pum) ##                name 0.05 0.5 0.95 ## 1    BYRNE (R AL-1)  392 405  412 ## 2     ROBY (R AL-2)  268 280  290 ## 3   ROGERS (R AL-3)  332 346  370 ## 4 ADERHOLT (R AL-4)  306 317  329 ## 5   BROOKS (R AL-5)  426 428  429 ## 6   PALMER (R AL-6)  385 398  407 # Use ideal from pscl with the same data object (h116.c) to get ideal points cl = constrain.legis(h116.c, x = list(\"CLYBURN\" = -1, \"SCALISE\" = 1), d = 1) post_samples_ideal = ideal(h116.c, d = 1, priors = cl, startvals = cl,                            maxiter = 20000, thin = 50, burnin = 10000,                            store.item = TRUE, verbose = TRUE) rank_ideal = post_rank(h116.c, post_samples_ideal$x[,,1], c(0.05, 0.5, 0.95)) # Setup colors and symbols for the scatterplot partycolors = ifelse(h116.c$legis.data$party==\"R\",\"red\",                      ifelse(h116.c$legis.data$party==\"D\", \"blue\",\"green\")) partysymbols = ifelse(h116.c$legis.data$party==\"R\",17,                       ifelse(h116.c$legis.data$party==\"D\", 16,8)) # Identify selected legislators leg.to.plot = c(\"OCASIO-CORT (D NY-14)\",\"TLAIB (D MI-13)\",\"PRESSLEY (D MA-7)\",                 \"OMAR (D MN-5)\",\"AMASH (Indep MI-3)\",\"GAETZ (R FL-1)\") ind.leg.to.plot <- match(leg.to.plot, rownames(h116.c$votes)) # Create the scatterplot plot(rank_ideal$`0.5`, rank_pum$`0.5`, xlab=\"Rank order (IDEAL)\",      ylab=\"Rank Order (PUM)\", col=partycolors, pch=partysymbols, cex.lab = 1.5) text(rank_ideal$`0.5`[ind.leg.to.plot], rank_pum$`0.5`[ind.leg.to.plot] + 5,      labels=leg.to.plot, pos = c(4, 1, 3, 2, 2, 2), cex = 0.8) # Use wnominate from wnominate with the same data object (h116) to get ideal points library(wnominate) result_wnom = wnominate(h116.c, dims = 1,                         polarity = grep(\"SCALISE\", rownames(h116.c$legis.data)),                         verbose = TRUE) beta.wnom = result_wnom[[\"legislators\"]][[\"coord1D\"]] rank_wnom = rank(beta.wnom) # Setup colors and symbols for the scatterplot partycolors = ifelse(h116.c$legis.data$party==\"R\",\"red\",                      ifelse(h116.c$legis.data$party==\"D\", \"blue\",\"green\")) partysymbols = ifelse(h116.c$legis.data$party==\"R\",17,                       ifelse(h116.c$legis.data$party==\"D\", 16,8)) # Identify selected legislators leg.to.plot = c(\"OCASIO-CORT (D NY-14)\",\"TLAIB (D MI-13)\",\"PRESSLEY (D MA-7)\",                 \"OMAR (D MN-5)\",\"AMASH (Indep MI-3)\",\"GAETZ (R FL-1)\") ind.leg.to.plot <- match(leg.to.plot, rownames(h116.c$votes)) # Create the scatterplot plot(rank_wnom, rank_pum$`0.5`, xlab=\"Rank order (WNOMINAL)\",      ylab=\"Rank Order (PUM)\", col=partycolors, pch=partysymbols, cex.lab = 1.5) text(rank_wnom[ind.leg.to.plot] + 28, rank_pum$`0.5`[ind.leg.to.plot] + 5,      labels=leg.to.plot, pos = c(4, 1, 3, 2, 2, 2), cex = 0.8) item1_pum = item_char(vote_num = 5, x = c(-4, 2), post_samples_pum) item2_pum = item_char(vote_num = 9, x = c(-4, 2), post_samples_pum) item3_pum = item_char(vote_num = 6, x = c(-4, 2), post_samples_pum) item_list = list(item1_pum, item2_pum, item3_pum) vote_num_list = c(5,9,6) par(mfrow = c(1, 3), bty = \"n\") for (i in seq_along(item_list)) {   data <- item_list[[i]]   plot(NA, xlim = range(data$beta_samples),        ylim = range(data$ci_lower, data$ci_upper),        xlab = expression(beta[i]), ylab = \"Probability of voting 'Yes'\",        main = paste0(\"Vote \", vote_num_list[i]), xaxt = \"n\", cex.axis = 2, cex.main = 2.5,        cex.lab = 1.5)   axis(1, at = c(-4, -2, 0, 2), labels = c(-4, -2, 0, 2), cex.axis = 2)   polygon(c(data$beta_samples, rev(data$beta_samples)),           c(data$ci_upper, rev(data$ci_lower)), col = \"grey80\", border = NA)   lines(data$beta_samples, data$means, lwd = 1.5, col = \"black\") } par(mfrow = c(1, 1)) prob_pum_static = predict_pum(h116.c, post_samples_pum) waic_pum_static = calc_waic(h116.c, years_v = NULL, prob_pum_static) waic_pum_static ## [1] 77240.1 prob_ideal = predict_ideal(h116.c, post_samples_ideal) waic_ideal = calc_waic(h116.c, years_v = NULL, prob_ideal) waic_ideal ## [1] 86879.14"},{"path":"https://skylarshihub.github.io/pumBayes/articles/vignettes.html","id":"fitting-dynamic-probit-unfolding-models-dpum-using-pumbayes","dir":"Articles","previous_headings":"","what":"Fitting dynamic probit unfolding models (DPUM) using pumBayes","title":"pumBayes`:` Bayesian Estimation of Probit Unfolding Models for Binary Preference Data","text":"now demonstrate use function estimating time-varying preferences. Data passed two objects: (1) logical matrix values correspond affirmative votes, values negative votes, s correspond type missing data, (2) vector indicates period vote belongs. illustration, focus voting data U.S. Supreme Court 1937 2022, available download . can used implement MCMC get posterior samples. Paths ideal points Hugo Black Antonin Scalia.    , illustrative compare results PUM generated dynamic item response theory (DIRT) model proposed , implemented function package : Similar static case, functions can used calculate probability array DPUM DIRT. can used evaluate complexity-adjusted fit two models time period using WAIC criteria.  calculate difference WAIC scores dynamic IRT dynamic PUM (WAIC(DIRT) – WAIC(DPUM)) year 1937 2021. DPUM model consistently outperforms DIRT model, exception years toward end Warren’s term middle Burger’s term.","code":"load(url(\"http://mqscores.wustl.edu/media/2022/mqData2022.Rda\")) mqVotes <- t(mqData[,1:(ncol(mqData)- 3)]) mqVotes <- as.matrix(apply(mqVotes, c(1, 2), function(x) {   if (is.na(x)) {     NA   } else if (x == 0) {     TRUE   } else if (x == 1) {     FALSE   } })) mqTime <- mqData$time print(mqVotes[1:6,1:8]) ##                  3     4     6    10    12    13    15    22 ## CEHughes2    FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## JCMcReynolds  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE ## LDBrandeis   FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE ## GSutherland   TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE ## PButler       TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE ## HFStone      FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE # Set up hyperparams = list(alpha_mean = c(0, 0), alpha_scale = 5,                    delta_mean = c(-2, 10), delta_scale = sqrt(10),                    rho_mean = 0.9, rho_sigma = 0.04) control = list(num_iter = 80000, start_iter = 60000, keep_iter = 10,                flip_rate = 0.1, sd_prop_rho = 0.1) sign_refs = list(pos_inds = c(39, 5), neg_inds = c(12, 29),                  pos_year_inds = list(1:31, 1), neg_year_inds = list(1:29, 1:24)) # Run MCMC to get posterior samples post_samples_pum_dy = sample_pum_dynamic(mqVotes, mqTime, hyperparams,                                          control, sign_refs, verbose = TRUE) beta_mat = post_samples_pum_dy$beta mean_Black = colMeans(beta_mat[,grep(\"HLBlack\",colnames(beta_mat))]) term_Black = seq(1937,1970) plot(term_Black, mean_Black, type = \"b\", pch = 16, col = \"blue\", lwd = 2,      xlab = \"Year\", ylab = expression(beta[list(i,t)]), main = \"Hugo Black\") mean_Scalia = colMeans(beta_mat[,grep(\"AScalia\",colnames(beta_mat))]) term_Scalia = seq(1986,2015) plot(term_Scalia, mean_Scalia, type = \"b\", pch = 16, col = \"blue\", lwd = 2,      xlab = \"Year\", ylab = expression(beta[list(i,t)]), main = \"Antonin Scalia\") rho_samples <- as.numeric(post_samples_pum_dy[[\"rho\"]][[\"result\"]]) x_range <- seq(0.85, 0.95, length.out = 500) posterior_density <- density(rho_samples, from = 0.85, to = 0.95) prior_density_scaled <- function(x) {   dnorm(x, mean = 0.9, sd = 0.04) /     (pnorm(1, mean = 0.9, sd = 0.04) - pnorm(0, mean = 0.9, sd = 0.04)) } scale_factor <- max(posterior_density$y) / max(sapply(x_range, prior_density_scaled)) hist(rho_samples, breaks = 30, probability = TRUE, col = \"skyblue\", border = \"white\",      xlim = c(0.85, 0.95), xlab = expression(rho), ylab = \"Density\",      main = \"Posterior vs Prior\") lines(posterior_density, col = \"red\", lwd = 2) curve(prior_density_scaled(x) * scale_factor, from = 0.85, to = 0.95, add = TRUE,       col = \"darkgreen\", lwd = 2, lty = 2) legend(\"topright\", legend = c(\"Posterior\", \"Prior\"),        col = c(\"red\", \"darkgreen\"), lty = c(1, 2), lwd = 2, bty = \"n\") library(MCMCpack) special_judge_ind <- sapply(c(\"HLBlack\", \"PStewart\", \"WHRehnquist\"), function(name) {                                 grep(name, rownames(mqVotes))}) e0_v <- rep(0, nrow(mqVotes)) E0_v <- rep(1, nrow(mqVotes)) e0_v[special_judge_ind] <- c(-2, 1, 3) E0_v[special_judge_ind] <- c(10, 10, 10) post_samples_irt_dy <- MCMCdynamicIRT1d(   mqVotes, mqTime,   mcmc = 20000, burnin = 30000, thin = 10, verbose = 500,   tau2.start = 0.1, theta.start=theta.start,   a0 = 0, A0 = 1, b0=0, B0 = 1, c0=-10, d0=-2, e0 = e0_v,   E0 = E0_v, theta.constraints=list(CThomas=\"+\", SAAlito=\"+\",                                     WJBrennan=\"-\", WODouglas=\"-\", CEWhittaker=\"+\")) prob_pum_dy = predict_pum(mqVotes, mqTime, post_samples_pum_dy) prob_irt_dy = predict_irt(mqVotes, mqTime, post_samples_irt_dy) waic_pum_dy = calc_waic(mqVotes, mqTime, prob_pum_dy) waic_irt_dy = calc_waic(mqVotes, mqTime, prob_irt_dy) waic_diff = waic_irt_dy - waic_pum_dy years <- 1937:2021 plot(years, waic_diff, type = \"l\", lwd = 2.5,      xlab = \"Term\", ylab = expression(Delta * \"WAIC\"),      ylim = range(c(waic_diff, 0))) abline(h = 0, lty = 2, lwd = 2) abline(v = c(1946,1953,1969,1986,2005), lty = 3) text(c(1949.5,1961,1978,1996,2015), 160,      c(\"Vinson\", \"Warren\",\"Burger\",\"Rehnquist\",\"Roberts\"), cex = 0.9, pos = 3)"},{"path":"https://skylarshihub.github.io/pumBayes/articles/vignettes.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"pumBayes`:` Bayesian Estimation of Probit Unfolding Models for Binary Preference Data","text":"pumBayes package supports Bayesian estimation static dynamic probit unfolding models tailored binary preference data. allowing non-monotonic response functions, PUM offers flexible alternative traditional item response theory models, making particularly effective analyzing legislative judicial voting behaviors. comparisons models like IDEAL dynamic IRT, PUM demonstrates consistent ability capture ideological preferences higher accuracy, evidenced generally lower WAIC scores static dynamic applications. pumBayes’s flexibility accuracy make valuable tool researchers analyzing complex voting patterns ideological behaviors various political judicial contexts.","code":""},{"path":[]},{"path":"https://skylarshihub.github.io/pumBayes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Skylar Shi. Maintainer.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shi S (2024). pumBayes: Bayesian Estimation Probit Unfolding Models. R package version 0.1.0.","code":"@Manual{,   title = {pumBayes: Bayesian Estimation of Probit Unfolding Models},   author = {Skylar Shi},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"https://skylarshihub.github.io/pumBayes/index.html","id":"description","dir":"","previous_headings":"Bayesian Estimation of Probit Unfolding Models","what":"Description","title":"Bayesian Estimation of Probit Unfolding Models","text":"pumBayes R package designed Bayesian estimation probit unfolding models (PUM) binary preference data.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/index.html","id":"installation","dir":"","previous_headings":"Bayesian Estimation of Probit Unfolding Models","what":"Installation","title":"Bayesian Estimation of Probit Unfolding Models","text":"can install latest version pumBayes directly GitHub using following commands:","code":"# Install devtools package if not already installed install.packages(\"devtools\")  # Install pumBayes from GitHub library(devtools) install_github(\"SkylarShiHub/pumBayes\")"},{"path":"https://skylarshihub.github.io/pumBayes/index.html","id":"documents","dir":"","previous_headings":"Bayesian Estimation of Probit Unfolding Models","what":"Documents","title":"Bayesian Estimation of Probit Unfolding Models","text":"detailed usage instructions, please refer vignette (https://SkylarShiHub.github.io/pumBayes/articles/vignettes.html).","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/calc_waic.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a block version of Watanabe-Akaike Information Criterion (WAIC) — calc_waic","title":"Calculate a block version of Watanabe-Akaike Information Criterion (WAIC) — calc_waic","text":"function used get WAIC value blocking members","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/calc_waic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a block version of Watanabe-Akaike Information Criterion (WAIC) — calc_waic","text":"","code":"calc_waic(vote_info, years_v = NULL, prob_array)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/calc_waic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a block version of Watanabe-Akaike Information Criterion (WAIC) — calc_waic","text":"vote_info logical vote matrix (rollcall object) rows represent members columns represent issues. entries FALSE (\"\"), TRUE (\"Yes\"), NA (missing data). years_v vector representing time period vote model. defultly set `NULL` static model. prob_array array probabilities three dimensions.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/calc_waic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a block version of Watanabe-Akaike Information Criterion (WAIC) — calc_waic","text":"block WAIC value static PUM vector WAIC time dynamic PUM.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/calc_waic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a block version of Watanabe-Akaike Information Criterion (WAIC) — calc_waic","text":"","code":"waic_pum_dy = calc_waic(prob_pum_dy, years_v = NULL, h116.c) #> Error in calc_waic(prob_pum_dy, years_v = NULL, h116.c): vote_info is not in a valid type. It has to be a matrix or a rollcall object."},{"path":"https://skylarshihub.github.io/pumBayes/reference/get_prob_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate probability matrix of a given set of parameters — get_prob_mat","title":"calculate probability matrix of a given set of parameters — get_prob_mat","text":"calculate probability matrix given set parameters","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/get_prob_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate probability matrix of a given set of parameters — get_prob_mat","text":"","code":"get_prob_mat(vote, beta, alpha1, alpha2, delta1, delta2)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/house_votes_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Voting Data from the 116th U.S. House of Representatives — house_votes_m","title":"Voting Data from the 116th U.S. House of Representatives — house_votes_m","text":"dataset containing processed vote data members 116th U.S. House Representatives different issues.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/house_votes_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Voting Data from the 116th U.S. House of Representatives — house_votes_m","text":"","code":"data(house_votes_m)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/house_votes_m.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Voting Data from the 116th U.S. House of Representatives — house_votes_m","text":"matrix 429 rows (members) 907 columns (issues), : 1 indicates 'Yes' vote, 0 indicates '' vote, NA indicates member vote.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/house_votes_m.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Voting Data from the 116th U.S. House of Representatives — house_votes_m","text":"Jeffrey B. Lewis, Keith Poole, Howard Rosenthal, Adam Boche, Aaron Rudkin, Luke Sonnet.   Voteview: Congressional roll-call votes database. https://voteview.com/, 2024. Accessed: 2024-07-15.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/init_data_gp_rcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"initialize member and position parameters and get starting points — init_data_gp_rcpp","title":"initialize member and position parameters and get starting points — init_data_gp_rcpp","text":"initialize member position parameters get starting points","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/init_data_gp_rcpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initialize member and position parameters and get starting points — init_data_gp_rcpp","text":"","code":"init_data_gp_rcpp(   vote_m,   years_v,   leg_pos_init,   alpha_pos_init,   delta_pos_init,   rho_init,   y_star_m_1_init,   y_star_m_2_init,   y_star_m_3_init,   total_iter,   pos_ind_list,   neg_ind_list,   pos_ind_years_list,   neg_ind_years_list )"},{"path":"https://skylarshihub.github.io/pumBayes/reference/init_data_rcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"initialize member and position parameters and get starting points — init_data_rcpp","title":"initialize member and position parameters and get starting points — init_data_rcpp","text":"initialize member position parameters get starting points","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/init_data_rcpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initialize member and position parameters and get starting points — init_data_rcpp","text":"","code":"init_data_rcpp(   vote_m,   leg_pos_init,   alpha_pos_init,   delta_pos_init,   y_star_m_1_init,   y_star_m_2_init,   y_star_m_3_init,   total_iter )"},{"path":"https://skylarshihub.github.io/pumBayes/reference/init_y_star_m.html","id":null,"dir":"Reference","previous_headings":"","what":"initialize three auxiliary parameters y — init_y_star_m","title":"initialize three auxiliary parameters y — init_y_star_m","text":"initialize three auxiliary parameters y initialize three auxiliary parameters y","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/init_y_star_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initialize three auxiliary parameters y — init_y_star_m","text":"","code":"init_y_star_m(vote_m)  init_y_star_m(vote_m)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/item_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Data for Item Characteristic Curves — item_char","title":"Generate Data for Item Characteristic Curves — item_char","text":"function calculates data needed plot item characteristic curve specific issue based posterior samples.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/item_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Data for Item Characteristic Curves — item_char","text":"","code":"item_char(vote_num, x = NULL, post_samples)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/item_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Data for Item Characteristic Curves — item_char","text":"vote_num vote number issue reviewed. refers numbers column names input vote matrix, clerk session vote number. x vector showing range beta x axis. post_samples list posterior samples parameters obtained `sample_pum_static` `pumBayes`.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/item_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Data for Item Characteristic Curves — item_char","text":"data frame containing `beta_samples`, mean probabilities (`means`), confidence intervals (`ci_lower` `ci_upper`) input issue, can used plot item characteristic curve.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/item_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Data for Item Characteristic Curves — item_char","text":"","code":"item_data <- item_char(vote_num = 5, post_samples = post_samples_pum)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/post_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Quantile Ranks for Legislators — post_rank","title":"Generate Quantile Ranks for Legislators — post_rank","text":"function calculates quantile ranks legislator based posterior samples beta parameters MCMC. function can handle specified quantiles, median (0.5), flexible support quantiles provided input.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/post_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Quantile Ranks for Legislators — post_rank","text":"","code":"post_rank(vote_info, beta, quantiles = c(0.5))"},{"path":"https://skylarshihub.github.io/pumBayes/reference/post_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Quantile Ranks for Legislators — post_rank","text":"vote_info vote object used getting posterior samples. beta matrix posterior samples beta obtained MCMC, columns representing legislators. quantiles numeric vector specifying quantiles calculated ranks (default `c(0.5)` median rank).","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/post_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Quantile Ranks for Legislators — post_rank","text":"data frame containing legislators' names, party affiliations, states, ranks specified quantile. median included, named `median` output. output data frame sorted ascending order based values median column.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/post_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Quantile Ranks for Legislators — post_rank","text":"","code":"rank_results = post_rank(vote_info = h116.c, beta = post_samples_pum$beta, quantiles = c(0.5))"},{"path":"https://skylarshihub.github.io/pumBayes/reference/post_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Sample Examples of Parameters — post_samples","title":"Posterior Sample Examples of Parameters — post_samples","text":"list posterior samples generated function 'sample_three_utility_probit'. parameter, 1000 iterations.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/post_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Sample Examples of Parameters — post_samples","text":"","code":"data(post_samples)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/post_samples.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Posterior Sample Examples of Parameters — post_samples","text":"list containing following elements: beta: matrix beta parameter samples. alpha1: matrix alpha1 parameter samples. alpha2: matrix alpha2 parameter samples. delta1: matrix delta1 parameter samples. delta2: matrix delta2 parameter samples.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/post_samples.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Posterior Sample Examples of Parameters — post_samples","text":"Simulated posterior samples based dataset 'house_votes_m'.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_ideal.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Probabilities for the IDEAL Model — predict_ideal","title":"Calculate Probabilities for the IDEAL Model — predict_ideal","text":"function computes probability matrix IDEAL Model. Specifically, calculates probabilities voting \"Yea\" legislator (member), issue, (time period) based posterior samples model parameters.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_ideal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Probabilities for the IDEAL Model — predict_ideal","text":"","code":"predict_ideal(vote_info, post_samples)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_ideal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Probabilities for the IDEAL Model — predict_ideal","text":"vote_info logical vote matrix (rollcall object) rows represent members columns represent issues. entries FALSE (\"\"), TRUE (\"Yes\"), NA (missing data). post_samples Posterior samples obtained function 'ideal' 'pscl' package.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_ideal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Probabilities for the IDEAL Model — predict_ideal","text":"array probabilities three dimensions. first one represents members, second one refers issues, third one refers MCMC iterations.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_ideal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Probabilities for the IDEAL Model — predict_ideal","text":"","code":"prob_ideal = predict_ideal(post_samples_ideal, h116.c) #> Error in predict_ideal(post_samples_ideal, h116.c): vote_info is not in a valid type. It has to be a matrix or a rollcall object."},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_irt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Probabilities for Dynamic Item Response Theory Model — predict_irt","title":"Calculate Probabilities for Dynamic Item Response Theory Model — predict_irt","text":"function computes probability matrix dynamic item response theory (IRT) model. Specifically, calculates probabilities voting \"Yea\" legislator (member), issue, time period based posterior samples model parameters.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_irt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Probabilities for Dynamic Item Response Theory Model — predict_irt","text":"","code":"predict_irt(vote_info, years_v, post_samples)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_irt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Probabilities for Dynamic Item Response Theory Model — predict_irt","text":"vote_info logical vote matrix rows represent members columns represent issues. entries FALSE (\"\"), TRUE (\"Yes\"), NA (missing data). years_v vector representing time period vote model. post_samples MCMC results obtained `wnominate' function `wnominate' package.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_irt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Probabilities for Dynamic Item Response Theory Model — predict_irt","text":"","code":"prob_irt_dy = predict_irt(post_samples_irt_dy, mqVotes, mqTime) #> Error in predict_irt(post_samples_irt_dy, mqVotes, mqTime): The number of columns in `vote_info` does not match the length of `years_v`."},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_pum.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Probabilities for Probit Unfolding Models — predict_pum","title":"Calculate Probabilities for Probit Unfolding Models — predict_pum","text":"function computes probability matrix static dynamic Probit Unfolding Models. Specifically, calculates probabilities voting \"Yea\" legislator (member), issue, (time period) based posterior samples model parameters.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_pum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Probabilities for Probit Unfolding Models — predict_pum","text":"","code":"predict_pum(vote_info, years_v = NULL, post_samples)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_pum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Probabilities for Probit Unfolding Models — predict_pum","text":"vote_info logical vote matrix (rollcall object) rows represent members columns represent issues. entries FALSE (\"\"), TRUE (\"Yes\"), NA (missing data). years_v vector representing time period vote model. defultly set `NULL` static model. post_samples list posterior samples parameters obtained MCMC.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_pum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Probabilities for Probit Unfolding Models — predict_pum","text":"array probabilities three dimensions. first one represents members, second one refers issues, third one refers MCMC iterations.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/predict_pum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Probabilities for Probit Unfolding Models — predict_pum","text":"","code":"prob_pum_static = predict_pum(h116.c, years_v = NULL, post_samples_pum)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/preprocess_rollcall.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess Roll Call Data — preprocess_rollcall","title":"Preprocess Roll Call Data — preprocess_rollcall","text":"function used preprocess roll call data analysis. allows users remove legislators, combine legislators specified indices, exclude lopsided votes based minority voting proportions, filter legislators excessive missing votes.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/preprocess_rollcall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess Roll Call Data — preprocess_rollcall","text":"","code":"preprocess_rollcall(   x,   data_preprocess = list(leg_rm = NULL, combine_leg_index = NULL, combine_leg_party =     NULL, lop_leg = 0.6, lop_issue = 0) )"},{"path":"https://skylarshihub.github.io/pumBayes/reference/preprocess_rollcall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess Roll Call Data — preprocess_rollcall","text":"x rollcall object data_preprocess list parameters preprocessing: `leg_rm` (default = NULL): vector indices specifying legislators removed. `combine_leg_index` (default = NULL): list vectors vector specifies indices legislators combined. `combine_leg_party` (default = NULL): vector specifying party affiliations combined legislators. `lop_leg` (default = 0.6): threshold indicating maximum allowable proportion missing votes legislator. Legislators proportion missing votes greater value removed. `lop_issue` (default = 0): threshold proportion non-missing votes minority side. Voting issues minority proportion lower value excluded.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/preprocess_rollcall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess Roll Call Data — preprocess_rollcall","text":"rollcall object processed","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/preprocess_rollcall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess Roll Call Data — preprocess_rollcall","text":"","code":"h116.clean = preprocess_rollcall(h116)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_dynamic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate posterior samples from the dynamic probit unfolding model — sample_pum_dynamic","title":"Generate posterior samples from the dynamic probit unfolding model — sample_pum_dynamic","text":"function generates posterior samples parameters based dynamic probit unfolding model.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_dynamic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate posterior samples from the dynamic probit unfolding model — sample_pum_dynamic","text":"","code":"sample_pum_dynamic(   vote_info,   years_v,   hyperparams,   control,   sign_refs,   verbose = FALSE )"},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_dynamic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate posterior samples from the dynamic probit unfolding model — sample_pum_dynamic","text":"years_v vector representing time period vote model. hyperparams list hyperparameter values including: - `beta_mean`: Prior mean beta. - `beta_var`: Prior variance beta. - `alpha_mean`: vector 2 values prior means alpha1 alpha2. - `alpha_scale`: Scale parameter alpha1 alpha2. - `delta_mean`: vector 2 values prior means delta1 delta2. - `delta_scale`: Scale parameter delta1 delta2. - `rho_mean`: Prior mean autocorrelation parameter `rho`. - `rho_sigma`: Standard deviation prior `rho`. control list specifying MCMC configurations, including: - `num_iter`: Total number iterations. - `start_iter`: Iteration number start retaining samples (burn-). - `keep_iter`: Interval samples retained. - `flip_rate`: Probability directly flipping signs M-H step, rather resampling priors. - `sd_prop_rho`: Proposal standard deviation `rho` Metropolis-Hastings step. sign_refs list containing sign constraints, including: - `pos_inds`: Indices members constrained positive values. - `neg_inds`: Indices members constrained negative values. - `pos_year_inds`: List years corresponding `pos_ind`. - `neg_year_inds`: List years corresponding `neg_ind`. verbose Logical. `TRUE`, prints progress additional information sampling process. vote_m logical vote matrix rows represent members columns represent issues. entries FALSE (\"\"), TRUE (\"Yes\"), NA (missing data).","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_dynamic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate posterior samples from the dynamic probit unfolding model — sample_pum_dynamic","text":"list containing:   - `beta`: data frame posterior samples beta.   - `alpha1`: data frame posterior samples alpha1.   - `alpha2`: data frame posterior samples alpha2.   - `delta1`: data frame posterior samples delta1.   - `delta2`: data frame posterior samples delta2.   - `rho`: data frame posterior samples rho.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_dynamic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate posterior samples from the dynamic probit unfolding model — sample_pum_dynamic","text":"","code":"hyperparams = list(beta_mean = 0, beta_var = 1, alpha_mean = c(0, 0), alpha_scale = 5,                     delta_mean = c(-2, 10), delta_scale = sqrt(10),                     rho_mean = 0.9, rho_sigma = 0.04) control = list(num_iter = 100, start_iter = 0, keep_iter = 1, flip_rate = 0.1, sd_prop_rho = 0.1) sign_refs = list(pos_inds = c(39, 5), neg_inds = c(12, 29),                  pos_year_inds = list(1:31, 1), neg_year_inds = list(1:29, 1:24)) post_samples_dy = sample_pum_dynamic(mqVotes, mqTime, hyperparams, control, sign_refs, verbose = FALSE)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_static.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate posterior samples from the static probit unfolding model — sample_pum_static","title":"Generate posterior samples from the static probit unfolding model — sample_pum_static","text":"function generates posterior samples parameters based static probit unfolding model.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate posterior samples from the static probit unfolding model — sample_pum_static","text":"","code":"sample_pum_static(   vote_info,   hyperparams,   control,   pos_leg = 0,   verbose = FALSE )"},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate posterior samples from the static probit unfolding model — sample_pum_static","text":"vote_info logical vote matrix (rollcall object) rows represent members columns represent issues. hyperparams list hyperparameter values: - `beta_mean`: Prior mean beta. - `beta_var`: Variance beta. - `alpha_mean`: vector two components representing prior means `alpha1` `alpha2`. - `alpha_scale`: Scale parameter `alpha1` `alpha2`. - `delta_mean`: vector two components representing prior means `delta1` `delta2`. - `delta_scale`: Scale parameter `delta1` `delta2`. control list MCMC configurations: - `num_iter`: Total number iterations. recommended set least 30,000 ensure reliable results. - `start_iter`: Iteration number start retaining data burn-. - `keep_iter`: Interval iterations kept posterior samples. - `flip_rate`: Probability directly flipping signs M-H step, rather resampling priors. pos_leg Name legislator whose position kept positive. verbose Logical. `TRUE`, prints progress additional information sampling process.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_static.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate posterior samples from the static probit unfolding model — sample_pum_static","text":"list primarily containing:   - `beta`: matrix posterior samples `beta`.   - `alpha1`: matrix posterior samples `alpha1`.   - `alpha2`: matrix posterior samples `alpha2`.   - `delta1`: matrix posterior samples `delta1`.   - `delta2`: matrix posterior samples `delta2`.   - `vote_info`: vote object data preprocessing.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/sample_pum_static.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate posterior samples from the static probit unfolding model — sample_pum_static","text":"","code":"hyperparams <- list(beta_mean = 0, beta_var = 1, alpha_mean = c(0, 0),                     alpha_scale = 5, delta_mean = c(-2, 10), delta_scale = sqrt(10)) control <- list(num_iter = 10, start_iter = 0, keep_iter = 1, flip_rate = 0.1) post_samples <- sample_pum_static(h116.c, hyperparams,                                   control, pos_leg = grep(\"SCALISE\", rownames(h116.c$votes)),                                   verbose = FALSE)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/tune_hyper.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Probability Samples for Voting ","title":"Generate Probability Samples for Voting ","text":"function generates probability samples Voting \"Yes\". uses predefined hyperparameters simulates data based specified number members (`n_leg`) issues (`n_issue`).","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/tune_hyper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Probability Samples for Voting ","text":"","code":"tune_hyper(hyperparams = hyperparams, n_leg, n_issue)"},{"path":"https://skylarshihub.github.io/pumBayes/reference/tune_hyper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Probability Samples for Voting ","text":"hyperparams list hyperparameter values: - `beta_mean`: prior mean `beta` parameter, representing legislator positions. - `beta_var`: prior variance `beta`. - `alpha_mean`: vector length two, specifying prior means item discrimination parameters, `alpha1` `alpha2`. - `alpha_scale`: scale parameter `alpha1` `alpha2`. - `delta_mean`: vector length two, indicating prior means item difficulty parameters, `delta1` `delta2`. - `delta_scale`: scale parameter `delta1` `delta2`. n_leg Integer, representing number legislators (members) simulated. n_issue Integer, indicating number issues simulated.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/tune_hyper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Probability Samples for Voting ","text":"numeric vector containing simulated probabilities voting \"Yes\" legislators across issues.","code":""},{"path":"https://skylarshihub.github.io/pumBayes/reference/tune_hyper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Probability Samples for Voting ","text":"","code":"hyperparams = list(beta_mean = 0, beta_var = 1, alpha_mean = c(0, 0),                    alpha_scale = 5, delta_mean = c(-2, 10),                    delta_scale = sqrt(10)) theta = tune_hyper(hyperparams, n_leg = 1000, n_issue = 1000)"}]
